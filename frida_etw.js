/*
 * Auto-generated by Frida. Please modify to match the signature of EtwEventRegister.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
    /**
     * Called synchronously when about to call EtwEventRegister.
     *
     * @this {object} - Object allowing you to store state for use in onLeave.
     * @param {function} log - Call this function with a string to be presented to the user.
     * @param {array} args - Function arguments represented as an array of NativePointer objects.
     * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
     * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
     * @param {object} state - Object allowing you to keep state across function calls.
     * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
     * However, do not use this to store function arguments across onEnter/onLeave, but instead
     * use "this" which is an object for keeping state local to an invocation.
     */
    onEnter(log, args, state) {
  
      var modmap = new ModuleMap();
  
      var guid = hexdump(args[0], {
          offset: 0,
          length: 16,
          header: false,
          ansi: false });
  
      var splitDoubleSpace = guid.split("  ")[1];
      var splitSpace = splitDoubleSpace.split(" ");
          
      var mod = modmap.find(args[0])
  
      if (mod !== null) {
        log("Module Name: " + mod.name);
        log("Module Base: " + mod.base);
        log("Module Size: " + mod.size);
        log("Module Path: " + mod.path);
      }
      else {
        log("Module Unknown");
        log("Module Address: " + args[0]);
      }
  
      // log(splitDoubleSpace)
      log("ETW GUID: " + splitSpace[3] + splitSpace[2] + splitSpace[1] + splitSpace[0] + "-" +
        splitSpace[5] + splitSpace[4] + "-" + 
        splitSpace[7] + splitSpace[6] + "-" + 
        splitSpace[8] + splitSpace[9] + "-" + 
        splitSpace[10] + splitSpace[11] + splitSpace[12] + splitSpace[13] + splitSpace[14] + splitSpace[15]);
      
      log("\nStack Trace:");
  
      var stack = Thread.backtrace(this.context, Backtracer.ACCURATE)
  
      var loadedModules = {};
  
      for (i = 0; i < stack.length; i++) {
        var symmod = modmap.find(stack[i])
        if (symmod !== null) {
          if (!(symmod.name in loadedModules)) {
            try {
              DebugSymbol.load(symmod.name);
            } catch (err) {
              return 0;
            }
            loadedModules[symmod.name] = 1;
          }
        }
  
        var fname = DebugSymbol.fromAddress(stack[i]);
        if (fname.name !== null) {
          log(fname.address + ":" + fname.moduleName + "!" + fname.name);
        }
        else {
          log(fname.address);
        }
      }
  
      log("\n******************************************************\n");
    },
  
    /**
     * Called synchronously when about to return from EtwEventRegister.
     *
     * See onEnter for details.
     *
     * @this {object} - Object allowing you to access state stored in onEnter.
     * @param {function} log - Call this function with a string to be presented to the user.
     * @param {NativePointer} retval - Return value represented as a NativePointer object.
     * @param {object} state - Object allowing you to keep state across function calls.
     */
    onLeave(log, retval, state) {
    }
  }
  
